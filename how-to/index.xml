<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How-tos on Cloudprober</title>
    <link>https://cloudprober.org/how-to/</link>
    <description>Recent content in How-tos on Cloudprober</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 17:48:13 -0500</lastBuildDate>
    
	<atom:link href="https://cloudprober.org/how-to/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Built-in Servers</title>
      <link>https://cloudprober.org/how-to/built-in-servers/</link>
      <pubDate>Fri, 11 Oct 2019 17:48:13 -0500</pubDate>
      
      <guid>https://cloudprober.org/how-to/built-in-servers/</guid>
      <description>Cloudprober has a few built in servers. This is useful when you are probing that a connection is working, or as a baseline to compare the probing results from your actual service to.
HTTP server { type: HTTP http_server { port: 8080 } } This creates an HTTP server that responds on port 8080. By default it will respond to the following endpoints:
 /healthcheck /lameduck  server { type: HTTP http_server { port: 8080 pattern_data_handler { response_size: 1024 } pattern_data_handler { response_size: 4 pattern: &amp;#34;four&amp;#34; } } } This adds two endpoints to the HTTP server:</description>
    </item>
    
    <item>
      <title>Extending Cloudprober</title>
      <link>https://cloudprober.org/how-to/extensions/</link>
      <pubDate>Mon, 29 Oct 2018 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/how-to/extensions/</guid>
      <description>Cloudprober allows you to extend it across &amp;ldquo;probe&amp;rdquo; and &amp;ldquo;target&amp;rdquo; dimensions, that is, you can add new probe and target types to it without having to fork the entire codebase. Note that to extend cloudprober in this way, you will have to maintain your own cloudprober binary (which is mostly a wrapper around the &amp;ldquo;cloudprober package&amp;rdquo;), but you&amp;rsquo;ll be able to use rest of the cloudprober code from the common location.</description>
    </item>
    
    <item>
      <title>External Probe</title>
      <link>https://cloudprober.org/how-to/external-probe/</link>
      <pubDate>Sun, 08 Oct 2017 17:24:32 -0700</pubDate>
      
      <guid>https://cloudprober.org/how-to/external-probe/</guid>
      <description>External probe type allows you to run arbitrary, complex probes through Cloudprober. An external probe runs an independent external program for actual probing. Cloudprober calculates probe metrics based on program&amp;rsquo;s exit status and time elapsed in execution. Cloudprober also allows external programs to provide additional metrics over stdout.
Sample Probe To understand how it works, lets create a sample probe that sets and gets a key in a redis server.</description>
    </item>
    
  </channel>
</rss>