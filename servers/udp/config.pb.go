// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/servers/udp/config.proto

/*
Package udp is a generated protocol buffer package.

It is generated from these files:
	github.com/google/cloudprober/servers/udp/config.proto

It has these top-level messages:
	ServerConf
*/
package udp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServerConf_Type int32

const (
	// Echos the incoming packet back.
	// Note that UDP echo server limits reads to 4098 bytes. For messages longer
	// than 4098 bytes it won't work as expected.
	ServerConf_ECHO ServerConf_Type = 0
	// Discard the incoming packet. Return nothing.
	ServerConf_DISCARD ServerConf_Type = 1
)

var ServerConf_Type_name = map[int32]string{
	0: "ECHO",
	1: "DISCARD",
}
var ServerConf_Type_value = map[string]int32{
	"ECHO":    0,
	"DISCARD": 1,
}

func (x ServerConf_Type) Enum() *ServerConf_Type {
	p := new(ServerConf_Type)
	*p = x
	return p
}
func (x ServerConf_Type) String() string {
	return proto.EnumName(ServerConf_Type_name, int32(x))
}
func (x *ServerConf_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerConf_Type_value, data, "ServerConf_Type")
	if err != nil {
		return err
	}
	*x = ServerConf_Type(value)
	return nil
}
func (ServerConf_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ServerConf struct {
	Port             *int32           `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	Type             *ServerConf_Type `protobuf:"varint,2,req,name=type,enum=cloudprober.servers.udp.ServerConf_Type" json:"type,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ServerConf) Reset()                    { *m = ServerConf{} }
func (m *ServerConf) String() string            { return proto.CompactTextString(m) }
func (*ServerConf) ProtoMessage()               {}
func (*ServerConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerConf) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *ServerConf) GetType() ServerConf_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ServerConf_ECHO
}

func init() {
	proto.RegisterType((*ServerConf)(nil), "cloudprober.servers.udp.ServerConf")
	proto.RegisterEnum("cloudprober.servers.udp.ServerConf_Type", ServerConf_Type_name, ServerConf_Type_value)
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/servers/udp/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0xce,
	0xc9, 0x2f, 0x4d, 0x29, 0x28, 0xca, 0x4f, 0x4a, 0x2d, 0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d,
	0x2a, 0xd6, 0x2f, 0x4d, 0x29, 0xd0, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x47, 0x52, 0xa5, 0x07, 0x55, 0xa5, 0x57, 0x9a, 0x52, 0xa0, 0x54, 0xcb,
	0xc5, 0x15, 0x0c, 0xe6, 0x3a, 0xe7, 0xe7, 0xa5, 0x09, 0x09, 0x71, 0xb1, 0x14, 0xe4, 0x17, 0x95,
	0x48, 0x30, 0x2a, 0x30, 0x69, 0xb0, 0x06, 0x81, 0xd9, 0x42, 0x36, 0x5c, 0x2c, 0x25, 0x95, 0x05,
	0xa9, 0x12, 0x4c, 0x0a, 0x4c, 0x1a, 0x7c, 0x46, 0x1a, 0x7a, 0x38, 0x4c, 0xd2, 0x43, 0x18, 0xa3,
	0x17, 0x52, 0x59, 0x90, 0x1a, 0x04, 0xd6, 0xa5, 0x24, 0xcb, 0xc5, 0x02, 0xe2, 0x09, 0x71, 0x70,
	0xb1, 0xb8, 0x3a, 0x7b, 0xf8, 0x0b, 0x30, 0x08, 0x71, 0x73, 0xb1, 0xbb, 0x78, 0x06, 0x3b, 0x3b,
	0x06, 0xb9, 0x08, 0x30, 0x02, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x71, 0x4a, 0xce, 0xd0, 0x00,
	0x00, 0x00,
}
