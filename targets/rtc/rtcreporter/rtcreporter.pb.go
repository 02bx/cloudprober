// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/targets/rtc/rtcreporter/rtcreporter.proto

/*
Package rtcreporter is a generated protocol buffer package.

It is generated from these files:
	github.com/google/cloudprober/targets/rtc/rtcreporter/rtcreporter.proto

It has these top-level messages:
	RtcReportOptions
	RtcTargetInfo
*/
package rtcreporter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RtcReportOptions struct {
	// RTC configs which cloudprober should report itself to.
	Cfgs []string `protobuf:"bytes,1,rep,name=cfgs" json:"cfgs,omitempty"`
	// RTC rate at which cloudprober should report itself.
	IntervalMsec *int32 `protobuf:"varint,2,opt,name=interval_msec,json=intervalMsec,def=10000" json:"interval_msec,omitempty"`
	// Which system variables should be reported. For more information see
	// cloudprober/util. The sysVars dictionary contains variable names mapped to
	// their values. variables should be a list of the variable names that should
	// be reported (such as public/private ips).
	Variables []string `protobuf:"bytes,3,rep,name=variables" json:"variables,omitempty"`
	// Which groups this instance is a member of. See RtcTargetInfo.group for
	// more info.
	Groups           []string `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RtcReportOptions) Reset()                    { *m = RtcReportOptions{} }
func (m *RtcReportOptions) String() string            { return proto.CompactTextString(m) }
func (*RtcReportOptions) ProtoMessage()               {}
func (*RtcReportOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_RtcReportOptions_IntervalMsec int32 = 10000

func (m *RtcReportOptions) GetCfgs() []string {
	if m != nil {
		return m.Cfgs
	}
	return nil
}

func (m *RtcReportOptions) GetIntervalMsec() int32 {
	if m != nil && m.IntervalMsec != nil {
		return *m.IntervalMsec
	}
	return Default_RtcReportOptions_IntervalMsec
}

func (m *RtcReportOptions) GetVariables() []string {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *RtcReportOptions) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

// RtcTargetInfo is used by RTC targets. Hosts report all the ways they may be
// addressed to an RTC configuration, which will later be used as target
// information.
// The rtcreporter package is responsible for creating and sending these
// protobufs, while the rtc targets type of the targets package will receive
// these protobufs.
type RtcTargetInfo struct {
	// Name of host. Also used as variable name in the RTC config.
	InstanceName *string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	// List of tags this host belongs to, in order to filter out groups of related
	// hosts. For instance, maybe an rtc lister will only include instances that
	// have the group tag "DMZ_1". Instances may belong to multiple groups.
	Groups []string `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	// List of all ways this host can be addressed (such as public / private ip).
	Addresses        []*RtcTargetInfo_Address `protobuf:"bytes,3,rep,name=addresses" json:"addresses,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *RtcTargetInfo) Reset()                    { *m = RtcTargetInfo{} }
func (m *RtcTargetInfo) String() string            { return proto.CompactTextString(m) }
func (*RtcTargetInfo) ProtoMessage()               {}
func (*RtcTargetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RtcTargetInfo) GetInstanceName() string {
	if m != nil && m.InstanceName != nil {
		return *m.InstanceName
	}
	return ""
}

func (m *RtcTargetInfo) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *RtcTargetInfo) GetAddresses() []*RtcTargetInfo_Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type RtcTargetInfo_Address struct {
	// "Name" of this address. An rtc lister may only include, for instance,
	// public ip addresses. It will filter out all Addresses that do not have
	// "PUBLIC_IP" as their tag.
	Tag *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	// Address contents.
	Address          *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RtcTargetInfo_Address) Reset()                    { *m = RtcTargetInfo_Address{} }
func (m *RtcTargetInfo_Address) String() string            { return proto.CompactTextString(m) }
func (*RtcTargetInfo_Address) ProtoMessage()               {}
func (*RtcTargetInfo_Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *RtcTargetInfo_Address) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *RtcTargetInfo_Address) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*RtcReportOptions)(nil), "cloudprober.targets.rtcreporter.RtcReportOptions")
	proto.RegisterType((*RtcTargetInfo)(nil), "cloudprober.targets.rtcreporter.RtcTargetInfo")
	proto.RegisterType((*RtcTargetInfo_Address)(nil), "cloudprober.targets.rtcreporter.RtcTargetInfo.Address")
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/targets/rtc/rtcreporter/rtcreporter.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0x66, 0xfb, 0x63, 0xd9, 0x68, 0xa1, 0xe4, 0x20, 0x41, 0x04, 0x4b, 0xbd, 0x14, 0x0f, 0xd9,
	0x55, 0xd0, 0x83, 0x37, 0x4f, 0xe2, 0x41, 0x85, 0xd0, 0x7b, 0x49, 0xd3, 0x69, 0x5c, 0xd8, 0xdd,
	0x2c, 0x93, 0xd9, 0x3e, 0x83, 0xaf, 0xe8, 0xdb, 0xc8, 0xa6, 0x29, 0x5d, 0x4f, 0x1e, 0x02, 0xf3,
	0x7d, 0x99, 0xef, 0x87, 0x61, 0xaf, 0xb6, 0xa0, 0xaf, 0x76, 0x23, 0x8d, 0xab, 0x32, 0xeb, 0x9c,
	0x2d, 0x21, 0x33, 0xa5, 0x6b, 0xb7, 0x0d, 0xba, 0x0d, 0x60, 0x46, 0x1a, 0x2d, 0x90, 0xcf, 0x90,
	0x4c, 0xf7, 0x10, 0x1a, 0x87, 0x04, 0xd8, 0x9f, 0x65, 0x83, 0x8e, 0x1c, 0xbf, 0xe9, 0xc9, 0x64,
	0x94, 0xc9, 0xde, 0xda, 0xe2, 0x3b, 0x61, 0x33, 0x45, 0x46, 0x05, 0xfc, 0xd9, 0x50, 0xe1, 0x6a,
	0xcf, 0x39, 0x1b, 0x99, 0x9d, 0xf5, 0x22, 0x99, 0x0f, 0x97, 0xa9, 0x0a, 0x33, 0xbf, 0x63, 0xd3,
	0xa2, 0x26, 0xc0, 0xbd, 0x2e, 0xd7, 0x95, 0x07, 0x23, 0x06, 0xf3, 0x64, 0x39, 0x7e, 0x1e, 0xdf,
	0xe7, 0x79, 0x9e, 0xab, 0x8b, 0xe3, 0xdf, 0xbb, 0x07, 0xc3, 0xaf, 0x59, 0xba, 0xd7, 0x58, 0xe8,
	0x4d, 0x09, 0x5e, 0x0c, 0x83, 0xc9, 0x89, 0xe0, 0x97, 0xec, 0xcc, 0xa2, 0x6b, 0x1b, 0x2f, 0x46,
	0xe1, 0x2b, 0xa2, 0xc5, 0x4f, 0xc2, 0xa6, 0x8a, 0xcc, 0x2a, 0xb4, 0x7c, 0xab, 0x77, 0x8e, 0xdf,
	0x76, 0x99, 0x9e, 0x74, 0x6d, 0x60, 0x5d, 0xeb, 0x0a, 0x44, 0x32, 0x4f, 0x96, 0x69, 0x17, 0x76,
	0x20, 0x3f, 0x74, 0x05, 0x3d, 0xbb, 0x41, 0xdf, 0x8e, 0xaf, 0x58, 0xaa, 0xb7, 0x5b, 0x04, 0xef,
	0x63, 0x89, 0xf3, 0x87, 0x27, 0xf9, 0xcf, 0x39, 0xe4, 0x9f, 0x7c, 0xf9, 0x72, 0xd0, 0xab, 0x93,
	0xd1, 0xd5, 0x23, 0x9b, 0x44, 0x96, 0xcf, 0xd8, 0x90, 0xb4, 0x8d, 0x9d, 0xba, 0x91, 0x0b, 0x36,
	0x89, 0x9b, 0xe1, 0x3a, 0xa9, 0x3a, 0xc2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x56, 0x88,
	0x44, 0xd1, 0x01, 0x00, 0x00,
}
