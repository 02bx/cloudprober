// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/surfacers/config.proto

/*
Package surfacers is a generated protocol buffer package.

It is generated from these files:
	github.com/google/cloudprober/surfacers/config.proto

It has these top-level messages:
	SurfacerDef
*/
package surfacers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import cloudprober_surfacer_prometheus "github.com/google/cloudprober/surfacers/prometheus"
import cloudprober_surfacer_stackdriver "github.com/google/cloudprober/surfacers/stackdriver"
import cloudprober_surfacer_file "github.com/google/cloudprober/surfacers/file"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enumeration for each type of surfacer we can parse and create
type Type int32

const (
	Type_NONE        Type = 0
	Type_PROMETHEUS  Type = 1
	Type_STACKDRIVER Type = 2
	Type_FILE        Type = 3
)

var Type_name = map[int32]string{
	0: "NONE",
	1: "PROMETHEUS",
	2: "STACKDRIVER",
	3: "FILE",
}
var Type_value = map[string]int32{
	"NONE":        0,
	"PROMETHEUS":  1,
	"STACKDRIVER": 2,
	"FILE":        3,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}
func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SurfacerDef struct {
	// This name is used for logging. If not defined, it's derived from the type.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *Type   `protobuf:"varint,2,opt,name=type,enum=cloudprober.surfacer.Type" json:"type,omitempty"`
	// Matching surfacer specific configuration (one for each type in the above
	// enum)
	//
	// Types that are valid to be assigned to Surfacer:
	//	*SurfacerDef_PrometheusSurfacer
	//	*SurfacerDef_StackdriverSurfacer
	//	*SurfacerDef_FileSurfacer
	Surfacer         isSurfacerDef_Surfacer `protobuf_oneof:"surfacer"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *SurfacerDef) Reset()                    { *m = SurfacerDef{} }
func (m *SurfacerDef) String() string            { return proto.CompactTextString(m) }
func (*SurfacerDef) ProtoMessage()               {}
func (*SurfacerDef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isSurfacerDef_Surfacer interface {
	isSurfacerDef_Surfacer()
}

type SurfacerDef_PrometheusSurfacer struct {
	PrometheusSurfacer *cloudprober_surfacer_prometheus.SurfacerConf `protobuf:"bytes,10,opt,name=prometheus_surfacer,json=prometheusSurfacer,oneof"`
}
type SurfacerDef_StackdriverSurfacer struct {
	StackdriverSurfacer *cloudprober_surfacer_stackdriver.SurfacerConf `protobuf:"bytes,11,opt,name=stackdriver_surfacer,json=stackdriverSurfacer,oneof"`
}
type SurfacerDef_FileSurfacer struct {
	FileSurfacer *cloudprober_surfacer_file.SurfacerConf `protobuf:"bytes,12,opt,name=file_surfacer,json=fileSurfacer,oneof"`
}

func (*SurfacerDef_PrometheusSurfacer) isSurfacerDef_Surfacer()  {}
func (*SurfacerDef_StackdriverSurfacer) isSurfacerDef_Surfacer() {}
func (*SurfacerDef_FileSurfacer) isSurfacerDef_Surfacer()        {}

func (m *SurfacerDef) GetSurfacer() isSurfacerDef_Surfacer {
	if m != nil {
		return m.Surfacer
	}
	return nil
}

func (m *SurfacerDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SurfacerDef) GetType() Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Type_NONE
}

func (m *SurfacerDef) GetPrometheusSurfacer() *cloudprober_surfacer_prometheus.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_PrometheusSurfacer); ok {
		return x.PrometheusSurfacer
	}
	return nil
}

func (m *SurfacerDef) GetStackdriverSurfacer() *cloudprober_surfacer_stackdriver.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_StackdriverSurfacer); ok {
		return x.StackdriverSurfacer
	}
	return nil
}

func (m *SurfacerDef) GetFileSurfacer() *cloudprober_surfacer_file.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_FileSurfacer); ok {
		return x.FileSurfacer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SurfacerDef) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SurfacerDef_OneofMarshaler, _SurfacerDef_OneofUnmarshaler, _SurfacerDef_OneofSizer, []interface{}{
		(*SurfacerDef_PrometheusSurfacer)(nil),
		(*SurfacerDef_StackdriverSurfacer)(nil),
		(*SurfacerDef_FileSurfacer)(nil),
	}
}

func _SurfacerDef_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SurfacerDef)
	// surfacer
	switch x := m.Surfacer.(type) {
	case *SurfacerDef_PrometheusSurfacer:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrometheusSurfacer); err != nil {
			return err
		}
	case *SurfacerDef_StackdriverSurfacer:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StackdriverSurfacer); err != nil {
			return err
		}
	case *SurfacerDef_FileSurfacer:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileSurfacer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SurfacerDef.Surfacer has unexpected type %T", x)
	}
	return nil
}

func _SurfacerDef_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SurfacerDef)
	switch tag {
	case 10: // surfacer.prometheus_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cloudprober_surfacer_prometheus.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_PrometheusSurfacer{msg}
		return true, err
	case 11: // surfacer.stackdriver_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cloudprober_surfacer_stackdriver.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_StackdriverSurfacer{msg}
		return true, err
	case 12: // surfacer.file_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(cloudprober_surfacer_file.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_FileSurfacer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SurfacerDef_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SurfacerDef)
	// surfacer
	switch x := m.Surfacer.(type) {
	case *SurfacerDef_PrometheusSurfacer:
		s := proto.Size(x.PrometheusSurfacer)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SurfacerDef_StackdriverSurfacer:
		s := proto.Size(x.StackdriverSurfacer)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SurfacerDef_FileSurfacer:
		s := proto.Size(x.FileSurfacer)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SurfacerDef)(nil), "cloudprober.surfacer.SurfacerDef")
	proto.RegisterEnum("cloudprober.surfacer.Type", Type_name, Type_value)
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/surfacers/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4e, 0xc2, 0x40,
	0x18, 0xc4, 0x29, 0xf6, 0x80, 0x5f, 0x11, 0x9b, 0x85, 0x03, 0xe1, 0x44, 0xbc, 0x48, 0x4c, 0xdc,
	0x26, 0xc4, 0x8b, 0xf1, 0xe0, 0x1f, 0xa8, 0x81, 0xa8, 0x60, 0x16, 0xf4, 0xaa, 0x65, 0xd9, 0x96,
	0x46, 0xda, 0x6d, 0xb6, 0xad, 0x09, 0xef, 0xed, 0x03, 0x98, 0x6d, 0x5c, 0x5b, 0x48, 0x0f, 0xbd,
	0x35, 0xdf, 0xcc, 0xfc, 0xa6, 0x3b, 0x70, 0xe5, 0xf9, 0xc9, 0x26, 0x5d, 0x61, 0xca, 0x03, 0xcb,
	0xe3, 0xdc, 0xdb, 0x32, 0x8b, 0x6e, 0x79, 0xba, 0x8e, 0x04, 0x5f, 0x31, 0x61, 0xc5, 0xa9, 0x70,
	0x1d, 0xca, 0x44, 0x6c, 0x51, 0x1e, 0xba, 0xbe, 0x87, 0x23, 0xc1, 0x13, 0x8e, 0x3a, 0x05, 0x0f,
	0x56, 0x9e, 0xde, 0x6d, 0x55, 0x56, 0x24, 0x78, 0xc0, 0x92, 0x0d, 0x4b, 0xf7, 0xb1, 0xbd, 0xbb,
	0xaa, 0x80, 0x38, 0x71, 0xe8, 0xd7, 0x5a, 0xf8, 0xdf, 0x4c, 0xec, 0x13, 0xae, 0xab, 0x12, 0x5c,
	0x5f, 0x4a, 0x85, 0xe8, 0xd9, 0x4f, 0x1d, 0x8c, 0xc5, 0x9f, 0x3e, 0x66, 0x2e, 0x42, 0xa0, 0x87,
	0x4e, 0xc0, 0xba, 0x5a, 0x5f, 0x1b, 0x1c, 0x93, 0xec, 0x1b, 0x61, 0xd0, 0x93, 0x5d, 0xc4, 0xba,
	0xf5, 0xbe, 0x36, 0x68, 0x0d, 0x7b, 0xb8, 0x6c, 0x06, 0xbc, 0xdc, 0x45, 0x8c, 0x64, 0x3e, 0xf4,
	0x09, 0xed, 0xfc, 0xad, 0x1f, 0xca, 0xd1, 0x85, 0xbe, 0x36, 0x30, 0x86, 0x97, 0xe5, 0xf1, 0x3c,
	0x80, 0xd5, 0xef, 0x8c, 0x78, 0xe8, 0x4e, 0x6a, 0x04, 0xe5, 0x92, 0x52, 0x10, 0x85, 0x4e, 0x61,
	0x8c, 0xbc, 0xc2, 0xc8, 0x2a, 0x70, 0x79, 0x45, 0x21, 0x71, 0xd8, 0xd1, 0x2e, 0x68, 0xff, 0x25,
	0x33, 0x38, 0x91, 0x7b, 0xe5, 0xf4, 0x66, 0x46, 0x3f, 0x2f, 0xa7, 0x4b, 0xeb, 0x21, 0xb6, 0x29,
	0x8f, 0xea, 0xf6, 0x00, 0xd0, 0x50, 0xee, 0x8b, 0x1b, 0xd0, 0xe5, 0x60, 0xa8, 0x01, 0xfa, 0x6c,
	0x3e, 0xb3, 0xcd, 0x1a, 0x6a, 0x01, 0xbc, 0x92, 0xf9, 0x8b, 0xbd, 0x9c, 0xd8, 0x6f, 0x0b, 0x53,
	0x43, 0xa7, 0x60, 0x2c, 0x96, 0xf7, 0xa3, 0xa7, 0x31, 0x99, 0xbe, 0xdb, 0xc4, 0xac, 0x4b, 0xeb,
	0xe3, 0xf4, 0xd9, 0x36, 0x8f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x14, 0xe0, 0x9a, 0xbe,
	0x02, 0x00, 0x00,
}
